@init
function lerp(a, b, t) (a + (b - a)*t);
n_noise;
noise_gain = 1;
ui.noise_clock += 1;
tau = 2*$pi;
line_noise_1 = 0;
line_noise_2 = 0;
function n_rand(speed)
(
  ui.noise_clock % speed == 0 ? (
    n_noise = rand();
  );
  n_noise;
);
function sizzle_line(xs ys w h seg) local(g_c, xe, ye, lx, yx, c, noise, tx)
(
  ui.supress_noise == 0 ? (
    xe = xs + w; ye = ys + h;
    c = 0; lx = xs; ly = ys;
    segs = seg * noise_gain/4;
    loop(segs+1, 
      noise = line_noise_1;
      ui.noise_clock % 4 == 0 ? (line_noise_1 = rand(noise_gain) - noise_gain/2;);
      t = c/segs; 

      tx = lerp(xs,xe,t);
      c != 1 ? (tx += noise);

      ty = lerp(ys,ye,t);
      noise = line_noise_2;
      ui.noise_clock % 4 == 0 ? (line_noise_2 = rand(noise_gain) - noise_gain/2;);
      c != 1 ? (ty += noise);

      gfx_line(lx,ly, tx, ty);    
      lx = tx;
      ly = ty;
      c += 1;
    );
  ) : (
    gfx_line(xs, ys, xs + w, ys + h);
  )
);
function sizzle_line_cosmetic(xs ys w h seg, noise_gain) local(g_c, xe, ye, lx, yx, c, noise, tx)
(
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a);
  xe = xs + w; ye = ys + h;
  c = 0; lx = xs; ly = ys;
  segs = seg * noise_gain/4;
  loop(segs+1, 
    noise = rand(noise_gain) - noise_gain/2;
    ui.noise_clock % 3 != 0 ? (noise = 0;);
    t = c/segs; 

    tx = lerp(xs,xe,t);
    c != 1 ? (tx += noise);

    ty = lerp(ys,ye,t);
    noise = rand(noise_gain) - noise_gain/2;
    ui.noise_clock % 3 != 0 ? (noise = 0;);
    c != 1 ? (ty += noise);
    ty < ys ? (ty = ys;);
    ty > ys + h ? (ty = ys + h;);

    gfx_line(lx,ly, tx, ty);    
    lx = tx;
    ly = ty;
    c += 1;
  );
);
function gfx_out_rect(x, y, w, h, t)local(seg)(
  seg = 20;
  sizzle_line(x,y,w,0,seg);
  sizzle_line(x,y,0,h,seg);
  sizzle_line(x+w,y+h,-w,0,seg);
  sizzle_line(x+w,y+h,0,-h,seg);
  ui.sl_x = x + w + ui.margin; ui.sl_y = y;
  ui.nl_x = x; ui.nl_y = y + h + ui.margin;
);
function dist(x1,y1,x2,y2) (
  sqrt(pow(x2-x1,2) + pow(y2-y1,2));
);
function gfx_col(r, g, b, a) 
(
  gfx_c.r = r; gfx_c.g = g; gfx_c.b = b; gfx_c.a = a;
);
function sizzle_palette(t, a) local(b)
(
  //b = 0.4;
  brightness = 0.22;
  tr = min(0.5 + brightness + cos((t       )*tau)*0.5,1) + b;
  tg = min(0.5 + brightness + cos((t + 0.33)*tau)*0.5,1) + b;
  tb = min(0.5 + brightness + cos((t + 0.67)*tau)*0.5,1) + b;
  gfx_col(tr, tg, tb, a);
  gfx_set(tr, tg, tb, a);
);
function slider_h(id, x, y, w, h, v_min, v_max, v, draw_value) 
local(r, rv, t2)
(
  ui.r = 0; ui.rv = 0;
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a*ui.disabled_alpha);
  gfx_out_rect(x, y, w, h, 1);
  t = (v - v_min)/(v_max - v_min);

  mx >= x && mx <= x + w 
  && my >= y && my <= y + h 
  && mouse_click == 1 
  && m_lock == 0 
  && ui.disabled == 0 ? (
    m_lock = id;
  );
  m_lock == id ? (
    t2 = (mx - x)/w;
    t2 = max(min(t2, 1), 0);
    ui.r = 1;
    ui.rv = lerp(v_min, v_max, t2);
  );
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, 0.16*ui.disabled_alpha);
  gfx_rect(x, y, w*t, h);
  
  draw_value == 1 ? (
    gfx_setfont(1, "Verdana", 15, 'i');
    gfx_measurestr("0.00", strw, strh);
    gfx_x = x + w/2 - strw/2;
    gfx_y = y + h/2 - strh/2;
    gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a*ui.disabled_alpha);
    gfx_drawnumber(v, 2);
  );
  ui.sl_x = x + w + ui.margin; ui.sl_y = y;
  ui.nl_x = x; ui.nl_y = y + h + ui.margin;
);
function slider_v(id, x, y, w, h, v_min, v_max, v, draw_value) 
local(r, rv, strw, strh, m_str, num_dc)
(
  ui.r = 0; ui.rv = 0;
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a);
  gfx_out_rect(x, y, w, h, 1);
  t = (v - v_min)/(v_max - v_min);

  mx >= x && mx <= x + w 
  && my >= y && my <= y + h 
  && mouse_click == 1 
  && m_lock == 0 ? (
    m_lock = id;
  );
  m_lock == id ? (
    t2 = 1 - (my - y)/h;
    t2 = max(min(t2, 1), 0);
    ui.r = 1;
    ui.rv = lerp(v_min, v_max, t2);
  );
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, ui.fill_alpha);
  gfx_rect(x, y+(1-t)*h, w, h*t);
  
  draw_value == 1 ? (
    gfx_setfont(1, "Verdana", 15, 'i');
    m_str = v*100 >= 10 ? "00.0" : "0.0";
    gfx_measurestr(m_str, strw, strh);
    gfx_x = x + w/2 - strw/2;
    gfx_y = y + h/2 - strh/2;
    gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a);
    num_dc = 1-v < 0.001 ? 0 : 1;
    gfx_drawnumber(v*100, num_dc);
  );
  ui.sl_x = x + w + ui.margin; ui.sl_y = y;
  ui.nl_x = x; ui.nl_y = y + h + ui.margin;
);
function checkbox(id, x, y, w, v, label) local(h, strw, strh)
(
  ui.r = 0; ui.rv = 0;
  gfx_setfont(1, "Verdana", w, 'i');
  gfx_measurestr(label, strw, strh);
  h = w;
  mx >= x && mx <= x + w + strw 
  && my >= y && my <= y + h 
  && mouse_click == 1 
  && m_lock == 0 ? (
    ui.r = 1;
    ui.rv = 1 - v;
  );

  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a);
  gfx_out_rect(x, y, w, w, 1);
  v == 1 ? (
    gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, 0.3);
    gfx_rect(x+3, y+3, w-5, h-5);
  );
  gfx_x = x + w + 5 + floor(n_rand(1)+0.5);
  gfx_y = y;
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, 0.9);
  gfx_drawstr(label);
  ui.sl_x = x + w + ui.margin + strw; ui.sl_y = y;
  ui.nl_x = x; ui.nl_y = y + h + ui.margin;
);
function sizzle_update() 
(
  //GUI_STATE
  mx = mouse_x; my = mouse_y; 
  dx = l_mx - mx; dy = l_my - my;
  mouse_down = mouse_cap&1; mouse_click = 0;
  l_mouse_down == 1 && mouse_down == 0 ? (
    m_lock = 0;
  ):(l_mouse_down == 0 && mouse_down == 1) ? (
    mouse_click = 1;
    ui.click_x = mx;
    ui.click_y = my;
  );
  l_mouse_down = mouse_down;
  l_mx = mx; l_my = my;
  ui.noise_clock += 1;
);
function sizzle_label(label, size, center) local(strw, strh)
(
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a*ui.disabled_alpha);
  gfx_setfont(1, "Courier New", size, 'i');
  gfx_measurestr(label, strw, strh);
  center == 1 ? (
    gfx_x -= strw/2;
  ) : (center == 2) ? (
    gfx_x -= strw;
  );
  gfx_drawstr(label);
);
function sizzle_label_rect(x, y, w, h, label, size, center, x_o, y_o)
local(strw, strh)
(
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a*ui.disabled_alpha);
  gfx_x = x + w/2 + x_o; //+ floor(n_rand(3)+0.5);
  gfx_y = y + h/2 + y_o;
  gfx_setfont(1, "Courier New", size, 'iu');
  gfx_measurestr(label, strw, strh);
  center == 1 ? (
    gfx_x -= strw/2;
    gfx_y -= strh/2;
  );
  gfx_drawstr(label);
  ui.sl_x = x + w + ui.margin; ui.sl_y = y;
  ui.nl_x = x; ui.nl_y = y + h + ui.margin;
);
function sizzle_separator(x, y, w, h) (
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, ui.separator_alpha);
  sizzle_line(x, y, w, h, 20);
  ui.sl_x = x + w + ui.margin; ui.sl_y = y;
  ui.nl_x = x; ui.nl_y = y + h + ui.margin;  
);
function sizzle_checkbox_full(id, x, y, w, h, v, label, size) local(h, strw, strh, a)
(
  ui.r = 0; ui.rv = 0;
  mx >= x && mx <= x + w 
  && my >= y && my <= y + h 
  && mouse_click == 1 
  && m_lock == 0 ? (
    ui.r = 1;
    ui.rv = 1 - v;
  );

  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a);
  gfx_out_rect(x, y, w, h, 1);
  v == 1 ? (
    gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, 0.3);
    gfx_rect(x+3, y+3, w-5, h-5);
  );
  gfx_setfont(1, "Verdana", size, 'i');
  gfx_measurestr(label, strw, strh);
  gfx_x = x + w/2 - strw/2;
  gfx_y = y + h/2 - strh/2;
  a = v == 1 ? 0.9 : 0.4;
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, a);
  gfx_drawstr(label);
  ui.sl_x = x + w + ui.margin; ui.sl_y = y;
  ui.nl_x = x; ui.nl_y = y + h + ui.margin;
);
function sizzle_disable()
(
  ui.disabled = 1;
  ui.disabled_alpha = ui.disabled_a;
);
function sizzle_enable()
(
  ui.disabled = 0;
  ui.disabled_alpha = 1;
);
function slider_v_thin(id, x, y, w, h, v_min, v_max, v, draw_value) 
local(r, rv, strw, strh, xc, m_str, num_dc)
(
  ui.r = 0; ui.rv = 0;
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a*ui.disabled_alpha);
  but_w = w/1.4; but_h = 23;

  xc = x + w/2;
  notch_w = 12;
  sizzle_line(xc - notch_w/2, y, notch_w, 0, 20);
  sizzle_line(xc - notch_w/2, y+h, notch_w, 0, 20);
  sizzle_line(x + w/2, y, 0, h, 20);
  t = (v - v_min)/(v_max - v_min);

  mx >= x && mx <= x + w 
  && my >= y && my <= y + h 
  && mouse_click == 1 
  && m_lock == 0
  && ui.disabled == 0 ? (
    m_lock = id;
  );
  m_lock == id ? (
    t2 = 1 - (my - (y + but_h/2))/(h - but_h);
    t2 = max(min(t2, 1), 0);
    ui.r = 1;
    ui.rv = lerp(v_min, v_max, t2);
  );
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, ui.fill_alpha*1*ui.disabled_alpha);
  gfx_rect(xc - notch_w/4, y+(1-t)*h, notch_w/2 + 1, h*t);
  
  gfx_set(bg_r, bg_g, bg_b, 1);
  but_x = xc - but_w/2; but_y = lerp(y, y + h - but_h, 1-t);
  gfx_rect(but_x, but_y - 2, but_w, but_h + 4, 1);
  
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a*ui.disabled_alpha);
  gfx_out_rect(but_x, but_y, but_w, but_h, 1);
  
  draw_value == 1 ? (
    gfx_setfont(1, "Verdana", 15, 'i');
    m_str = v*100 >= 10 ? "00.0" : "0.0";
    gfx_measurestr(m_str, strw, strh);
    gfx_x = xc - strw/2;
    gfx_y = but_y - strh/2 + but_h/2;
    gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a*ui.disabled_alpha);
    num_dc = 1-v < 0.001 ? 0 : 1;
    gfx_drawnumber(v*100, num_dc);
  );
  ui.sl_x = x + w + ui.margin; ui.sl_y = y;
  ui.nl_x = x; ui.nl_y = y + h + ui.margin;
);

function slider_v_jam(id, x, y, w, h, v_min, v_max, v, draw_value) 
local(r, rv, strw, strh, xc)
(
  ui.r = 0; ui.rv = 0;
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a);
  gfx_out_rect(x, y, w, h, 1);
  but_w = w; but_h = 23;

  xc = x + w/2;
  t = (v - v_min)/(v_max - v_min);

  mx >= x && mx <= x + w 
  && my >= y && my <= y + h 
  && mouse_click == 1 
  && m_lock == 0
  && ui.disabled == 0 ? (
    m_lock = id;
  );
  m_lock == id ? (
    t2 = 1 - (my - (y + but_h/2))/(h - but_h);
    t2 = max(min(t2, 1), 0);
    ui.r = 1;
    ui.rv = lerp(v_min, v_max, t2);
  );
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, ui.fill_alpha);
  t > 0.5 ? (
    gfx_rect(x, y + h/2 + h*(0.5 - t), w, h*(0.5 - t)*-1);
  ) : (
    gfx_rect(x, y + h/2, w, h*(0.5 - t));
  );
  
  
  gfx_set(bg_r, bg_g, bg_b, 1);
  but_x = xc - but_w/2; but_y = lerp(y, y + h - but_h, 1-t);
  gfx_rect(but_x, but_y, but_w, but_h, 1);
  
  gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a);
  gfx_out_rect(but_x, but_y, but_w, but_h, 1);
  
  draw_value == 1 ? (
    gfx_setfont(1, "Verdana", 15, 'i');
    gfx_measurestr("0.00", strw, strh);
    gfx_x = xc - strw/2;
    gfx_y = but_y - strh/2 + but_h/2;
    gfx_set(gfx_c.r, gfx_c.g, gfx_c.b, gfx_c.a);
    gfx_drawnumber(v, 2);
  );
  ui.sl_x = x + w + ui.margin; ui.sl_y = y;
  ui.nl_x = x; ui.nl_y = y + h + ui.margin;
);
function sizzle_invisible_button(id, x, y, w, h)
(
  ui.r = 0; ui.rv = 0;
  mx >= x && mx <= x + w 
  && my >= y && my <= y + h 
  && mouse_click == 1 
  && m_lock == 0 ? (
    ui.r = 1;
    ui.rv = 1 - v;
  );
  ui.sl_x = x + w + ui.margin; ui.sl_y = y;
  ui.nl_x = x; ui.nl_y = y + h + ui.margin;
);